var mongoose = require('mongoose')
, Schema = mongoose.Schema;
var ArraySchema = new Schema({
    "openTotalCapacity" : {type: Number},
    "numberOfImUnallocatedLUs" : {type: Number},
    "numberOfOpenUnallocatedLUs" : {type: Number},
    "openAllocatedCapacity" : {type: Number},
    "numberOfImReservedLUs" : {type: Number},
    "numberOfAllocatedLUs" : {type: Number},
    "openUnallocatedActualCapacity" : {type: Number},
    "openReservedActualCapacity" : {type : Number},
    "largestFreeSpaceInGB" : {type : Number},
    "name" : {type : String},
    "imAllocatedCapacity" : {type : Number},
    "description" : {type : String},
    "onDemandCapacityInKB" : {type : Number},
    "capacityInKB" : {type : Number},
    "arrayType" : {type : String},
    "autoFormatLU" : {type : Number},
    "displayArrayType" : {type : String},
    "numberOfLUs" : {type : Number},
    "largestFreeSpaceInKB" : {type : Number},
    "arrayFamily" : {type : String},
    "controllerVersion" : {type : String},
    "mfTotalCapacity" : {type : Number},
    "productName" : {type : String},
    "multipathSupport" : {type : Number},
    "onDemandCapacityInGB" : {type : Number},
    "numberOfSpareDrives" : {type : Number},
    "allocatedCapacityInGB" : {type : Number},
    "allocatedCapacityInKB" : {type : Number},
    "imFreeCapacity" : {type : Number},
    "objectID" : {type : String},
    "freeCapacityInKB" : {type : Number},
    "configUpdateStatus" : {type : Number},
    "sharedMemoryInMB" : {type : Number},
    "numberOfImAllocatedLUs" : {type : Number},
    "mfOnDemandCapacity" : {type : Number},
    "mfAllocatedCapacity" : {type : Number},
    "agentVersion" : {type : String},
    "capacityInGB" : {type : Number},
    "distributedMode" : {type : String},
    "mfUnallocatedCapacity" : {type : Number},
    "openAllocatedActualCapacity" : {type : Number},
    "numberOfControllers" : {type : Number},
    "slprStatus" : {type : Number},
    "numberOfOpenReservedLUs" : {type : Number},
    "openUnallocatedCapacity" : {type : Number},
    "freeCapacityInGB" : {type : Number},
    "openOnDemandCapacity" : {type : Number},
    "statusOfDBInconsistency" : {type : Number},
    "imOnDemandCapacity" : {type : Number},
    "numberOfReservedLUs" : {type : Number},
    "totalFreeSpaceInKB" : {type : Number},
    "numberOfUnallocatedLUs" : {type : Number},
    "sequenceNumber" : {type : Number, index: true },
    "microcodeVersion" : {type : String},
    "cacheInMB" : {type : Number},
    "openFreeCapacity" : {type : Number},
    "hihsmCapacityInGB" : {type : Number},
    "numberOfMfLDEVs" : {type : Number},
    "imHiHsmCapacity" : {type : Number},
    "numberOfAllocatedMfLDEVs" : {type : Number},
    "totalFreeSpaceInGB" : {type : Number},
    "securityStatus" : {type : Number},
    "imTotalCapacity" : {type : Number},
    "hihsmCapacityInKB" : {type : Number},
    "openHiHsmCapacity" : {type : Number},
    "numberOfUnallocatedMfLDEVs" : {type : Number},
    "openReservedCapacity" : {type : Number},
    "productCode" : {type : Number},
    "mfHiHsmCapacity" : {type : Number},
    "lastRefreshed" : {type : Number},
    "displayArrayFamily" : {type : String},
    "numberOfOpenAllocatedLUs" : {type : Number}
    },
    { collection : 'arrays'});



ArraySchema.methods.getArrayModel = function(serial, callback) {
    return this.find({'sequenceNumber' : serial }, callback);
}

mongoose.model('ArraySchema', ArraySchema);